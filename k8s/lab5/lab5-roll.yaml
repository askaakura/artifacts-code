# This scenario shows: 
# - how to roll out deployments with 2 different strategy: recreate and rollingUpdate, 
# - how to save/record deployments' revision while rolling out with "--record" (e.g. changing image): 
# # -- imperative: "kubectl set image deployment rcdeployment nginx=httpd --record", 
# # -- declerative, edit file: "kubectl edit deployment rolldeployment --record", 
# - how to rollback (rollout undo) the desired deployment revisions: 
# # -- "kubectl rollout undo deployment rolldeployment --to-revision=2", 
# - how to pause/resume rollout: -- pause: "kubectl rollout pause deployment rolldeployment", 
# # -- resume: "kubectl rollout resume deployment rolldeployment", 
# - how to see the status of rollout deployment: 
# # -- "kubectl rollout status deployment rolldeployment -w".


apiVersion: apps/v1
kind: Deployment
metadata:
  name: rolldeployment
  labels:
    team: development
spec:
  replicas: 10                     
  selector:
    matchLabels:                     # labelselector of deployment: selects pods which have "app:rolling" labels
      app: rolling
  strategy:
    type: RollingUpdate              # deployment roll up strategy: rollingUpdate => Pods are updated step by step, all pods are not deleted at the same time.
    rollingUpdate:                   
      maxUnavailable: 2              # shows the max number of deleted containers => total:10 container; if maxUnava:2, min:8 containers run in that time period
      maxSurge: 2                    # shows that the max number of containers    => total:10 container; if maxSurge:2, max:12 containers run in a time
  template:
    metadata:
      labels:                        # labels the pod with "app:rolling"
        app: rolling
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80

